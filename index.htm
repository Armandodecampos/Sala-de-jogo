<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lobby de Salas - Supabase</title>
    <!-- Carrega o Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Carrega o cliente Supabase -->
    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
    <style>
        /* Estilo para o spinner de carregamento */
        .loader {
            border-top-color: #3498db;
            -webkit-animation: spin 1s linear infinite;
            animation: spin 1s linear infinite;
        }
        @-webkit-keyframes spin {
            0% { -webkit-transform: rotate(0deg); }
            100% { -webkit-transform: rotate(360deg); }
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body class="bg-gray-900 text-white font-sans flex items-center justify-center min-h-screen">

    <!-- Container Principal -->
    <div class="w-full max-w-md p-8 bg-gray-800 rounded-lg shadow-xl relative">

        <!-- Overlay de Carregamento -->
        <div id="loading-overlay" class="absolute inset-0 bg-gray-800 bg-opacity-75 flex items-center justify-center rounded-lg z-50 hidden">
            <div class="loader ease-linear rounded-full border-8 border-t-8 border-gray-200 h-24 w-24"></div>
        </div>

        <!-- Título -->
        <h1 class="text-3xl font-bold text-center mb-6 text-white">Lobby de Salas</h1>

        <!-- #1: View de Autenticação -->
        <div id="auth-view">
            <!-- Abas de Login / Cadastro -->
            <div class="flex mb-4 border-b border-gray-700">
                <button id="tab-login" class="flex-1 py-2 text-center font-medium text-blue-400 border-b-2 border-blue-400">Login</button>
                <button id="tab-signup" class="flex-1 py-2 text-center font-medium text-gray-400">Cadastrar</button>
            </div>

            <!-- Formulário de Login -->
            <form id="login-form">
                <div class="mb-4">
                    <label for="login-email" class="block text-sm font-medium text-gray-300 mb-2">Email</label>
                    <input type="email" id="login-email" required class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="voce@email.com">
                </div>
                <div class="mb-6">
                    <label for="login-password" class="block text-sm font-medium text-gray-300 mb-2">Senha</label>
                    <input type="password" id="login-password" required class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="••••••••">
                </div>
                <button type="submit" class="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg transition duration-300">Entrar</button>
            </form>

            <!-- Formulário de Cadastro (escondido por padrão) -->
            <form id="signup-form" class="hidden">
                <div class="mb-4">
                    <label for="signup-email" class="block text-sm font-medium text-gray-300 mb-2">Email</label>
                    <input type="email" id="signup-email" required class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="voce@email.com">
                </div>
                <div class="mb-6">
                    <label for="signup-password" class="block text-sm font-medium text-gray-300 mb-2">Senha</label>
                    <input type="password" id="signup-password" required class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="Mínimo 6 caracteres">
                </div>
                <button type="submit" class="w-full bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-lg transition duration-300">Criar Conta</button>
            </form>

            <!-- Mensagens de Auth -->
            <p id="auth-message" class="text-center text-sm mt-4"></p>
        </div>

        <!-- #2: View do Lobby (Logado) -->
        <div id="lobby-view" class="hidden">
            <p id="welcome-message" class="text-center text-lg mb-6"></p>

            <!-- Criar Sala -->
            <button id="create-room-btn" class="w-full bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-3 px-4 rounded-lg transition duration-300 mb-6 shadow-lg">
                Criar Nova Sala
            </button>

            <!-- Entrar na Sala -->
            <form id="join-room-form">
                <label for="room-code-input" class="block text-sm font-medium text-gray-300 mb-2">Entrar em uma Sala</label>
                <div class="flex">
                    <input type="text" id="room-code-input" required class="flex-1 px-3 py-2 bg-gray-700 border border-gray-600 rounded-l-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="Digite o código">
                    <button type="submit" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-r-lg transition duration-300">Entrar</button>
                </div>
            </form>
            <p id="lobby-message" class="text-center text-red-400 text-sm mt-4"></p>

            <!-- Logout -->
            <button id="logout-btn" class="w-full mt-8 text-gray-400 hover:text-red-400 text-sm transition duration-300">Sair</button>
        </div>

        <!-- #3: View da Sala (Dentro da Sala) -->
        <div id="room-view" class="hidden relative"> <!-- Adicionado 'relative' para posicionar o botão -->
            <!-- Botão de Engrenagem (Configurações) -->
            <button id="settings-btn" class="absolute top-0 left-0 mt-2 ml-2 text-gray-400 hover:text-white transition duration-300">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                </svg>
            </button>

            <!-- CONTEÚDO ATUALIZADO DA SALA -->
            <h2 class="text-2xl font-bold text-center mb-4">Código da Sala:</h2>
            <p id="room-code-display" class="text-4xl font-mono font-bold text-center text-blue-400 bg-gray-900 rounded-lg py-4 mb-6"></p>

            <h3 class="text-lg font-semibold text-gray-300 mb-3">Quem está na sala:</h3>
            <ul id="participants-list" class="list-disc list-inside bg-gray-900 p-4 rounded-lg min-h-[120px] text-gray-200 space-y-1">
                <!-- Lista de participantes aparecerá aqui -->
            </ul>

            <button id="leave-room-btn" class="w-full bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded-lg transition duration-300 mt-6">Voltar ao Lobby</button>
        </div>
    </div>

    <!-- #4: Modal de Configurações da Sala -->
    <div id="settings-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
        <div class="bg-gray-800 rounded-lg shadow-xl p-6 w-full max-w-sm relative">
            <!-- Botão de Fechar -->
            <button id="close-modal-btn" class="absolute top-0 right-0 mt-2 mr-2 text-gray-500 hover:text-white">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
            <h2 class="text-2xl font-bold text-white text-center mb-4">Informação da Sala</h2>

            <!-- Código da Sala -->
            <div class="mb-4">
                <p class="text-gray-400">Código da Sala:</p>
                <p id="modal-room-code" class="text-2xl font-mono text-blue-400"></p>
            </div>

            <!-- Jogadores -->
            <div class="mb-6">
                <p class="text-gray-400">Jogadores:</p>
                <ul id="modal-participants-list" class="text-white list-disc list-inside space-y-1 mt-1">
                    <!-- Lista de jogadores no modal -->
                </ul>
            </div>

            <!-- Botão de Sair -->
            <button id="modal-logout-btn" class="w-full bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-lg transition duration-300">Sair</button>
        </div>
    </div>

    <script type="module">
        // --- 1. CONFIGURAÇÃO DO SUPABASE ---
        const SUPABASE_URL = 'https://jwvkewueqtjwtuglfmhi.supabase.co';
        const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imp3dmtld3VlcXRqd3R1Z2xmbWhpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjEyMjgyOTUsImV4cCI6MjA3NjgwNDI5NX0.M36XSfa6aWGGKOstV7pdT7qNlNsZD6RhUW7ng9OA0UA';

        if (SUPABASE_URL === 'SEU_SUPABASE_URL' || SUPABASE_ANON_KEY === 'SUA_SUPABASE_ANON_KEY') {
            document.getElementById('auth-view').innerHTML = `<p class="text-center text-red-400">Por favor, configure sua URL e Chave Anônima do Supabase.</p>`;
        }

        const { createClient } = supabase;
        const sb = createClient(SUPABASE_URL, SUPABASE_ANON_KEY, {
            auth: {
                // Impede que a sessão do usuário seja salva no localStorage.
                // Isso resolve o problema de travamento ao recarregar com uma sessão inválida.
                persistSession: false
            }
        });

        // --- 2. REFERÊNCIAS DO DOM ---
        const loadingOverlay = document.getElementById('loading-overlay');
        const authView = document.getElementById('auth-view');
        const lobbyView = document.getElementById('lobby-view');
        const roomView = document.getElementById('room-view');
        const tabLogin = document.getElementById('tab-login');
        const tabSignup = document.getElementById('tab-signup');
        const loginForm = document.getElementById('login-form');
        const signupForm = document.getElementById('signup-form');
        const joinRoomForm = document.getElementById('join-room-form');
        const authMessage = document.getElementById('auth-message');
        const lobbyMessage = document.getElementById('lobby-message');
        const welcomeMessage = document.getElementById('welcome-message');
        const createRoomBtn = document.getElementById('create-room-btn');
        const logoutBtn = document.getElementById('logout-btn');
        const leaveRoomBtn = document.getElementById('leave-room-btn');
        const roomCodeDisplay = document.getElementById('room-code-display');
        const roomCodeInput = document.getElementById('room-code-input');
        const participantsList = document.getElementById('participants-list');
        // Referências do Modal
        const settingsBtn = document.getElementById('settings-btn');
        const settingsModal = document.getElementById('settings-modal');
        const closeModalBtn = document.getElementById('close-modal-btn');
        const modalRoomCode = document.getElementById('modal-room-code');
        const modalParticipantsList = document.getElementById('modal-participants-list');
        const modalLogoutBtn = document.getElementById('modal-logout-btn');


        // --- 3. ESTADO DA APLICAÇÃO ---
        let currentUser = null;
        let currentRoomChannel = null;

        // --- 4. FUNÇÕES AUXILIARES ---
        function toggleLoading(isLoading) { loadingOverlay.classList.toggle('hidden', !isLoading); }
        function showAuthMessage(message, isError = false) { authMessage.textContent = message; authMessage.className = `text-center text-sm mt-4 ${isError ? 'text-red-400' : 'text-green-400'}`; }
        function showLobbyMessage(message, isError = true) { lobbyMessage.textContent = message; lobbyMessage.className = `text-center text-sm mt-4 ${isError ? 'text-red-400' : 'text-green-400'}`; }
        function showView(viewId) {
            ['auth-view', 'lobby-view', 'room-view'].forEach(id => document.getElementById(id).classList.add('hidden'));
            document.getElementById(viewId).classList.remove('hidden');
        }
        function generateRoomCode() { return Math.random().toString(36).substring(2, 8).toUpperCase(); }
        async function saveUserCurrentRoom(roomCode) {
            if (!currentUser) return;
            const { error } = await sb.from('profiles').update({ last_room: roomCode }).eq('id', currentUser.id);
            if (error) console.error('Erro ao salvar sala no perfil:', error.message);
        }
        async function clearUserCurrentRoom() { await saveUserCurrentRoom(null); }

        // --- 5. LÓGICA DE AUTENTICAÇÃO ---
        tabLogin.addEventListener('click', () => {
            loginForm.classList.remove('hidden'); signupForm.classList.add('hidden');
            tabLogin.classList.add('text-blue-400', 'border-blue-400'); tabSignup.classList.remove('text-blue-400', 'border-blue-400');
            authMessage.textContent = '';
        });
        tabSignup.addEventListener('click', () => {
            signupForm.classList.remove('hidden'); loginForm.classList.add('hidden');
            tabSignup.classList.add('text-blue-400', 'border-blue-400'); tabLogin.classList.remove('text-blue-400', 'border-blue-400');
            authMessage.textContent = '';
        });

        signupForm.addEventListener('submit', async (e) => {
            e.preventDefault(); toggleLoading(true);
            const { error } = await sb.auth.signUp({ email: document.getElementById('signup-email').value, password: document.getElementById('signup-password').value });
            if (error) showAuthMessage(error.message, true);
            else { showAuthMessage('Conta criada! Verifique seu email para confirmar.', false); signupForm.reset(); }
            toggleLoading(false);
        });

        loginForm.addEventListener('submit', async (e) => {
            e.preventDefault(); toggleLoading(true);
            const { error } = await sb.auth.signInWithPassword({ email: document.getElementById('login-email').value, password: document.getElementById('login-password').value });
            if (error) showAuthMessage(error.message, true);
            else { showAuthMessage(''); loginForm.reset(); }
            toggleLoading(false);
        });

        logoutBtn.addEventListener('click', async () => {
            toggleLoading(true);
            await leaveRoomRealtime();
            await sb.auth.signOut();
            toggleLoading(false);
        });

        // --- 6. LÓGICA DO MODAL ---
        function openSettingsModal() {
            modalRoomCode.textContent = roomCodeDisplay.textContent;
            modalParticipantsList.innerHTML = participantsList.innerHTML;
            settingsModal.classList.remove('hidden');
        }

        function closeSettingsModal() {
            settingsModal.classList.add('hidden');
        }

        settingsBtn.addEventListener('click', openSettingsModal);
        closeModalBtn.addEventListener('click', closeSettingsModal);
        modalLogoutBtn.addEventListener('click', () => {
             // Reutiliza a mesma lógica do botão de logout original
            logoutBtn.click();
        });


        // --- 7. LÓGICA DAS SALAS (COM REALTIME) ---
        function handlePresenceSync(newState) {
            const listToUpdate = [participantsList, modalParticipantsList];

            listToUpdate.forEach(list => {
                list.innerHTML = ''; // Limpa a lista antes de atualizar
                let hasParticipants = false;

                for (const id in newState) {
                    const presences = newState[id];
                    if (presences.length > 0) {
                        hasParticipants = true;
                        const email = presences[0].email || 'Usuário anônimo';
                        const li = document.createElement('li');
                        li.textContent = email + (id === currentUser?.id ? ' (Você)' : '');
                        if (id === currentUser?.id) li.classList.add('text-blue-300');
                        list.appendChild(li);
                    }
                }
                if (!hasParticipants) {
                    list.innerHTML = '<li class="text-gray-500">Ninguém aqui ainda...</li>';
                }
            });
        }

        async function joinRoomRealtime(roomCode) {
            if (!currentUser) return;
            await leaveRoomRealtime();
            currentRoomChannel = sb.channel(`room:${roomCode}`, { config: { presence: { key: currentUser.id } } });
            currentRoomChannel.on('presence', { event: 'sync' }, () => handlePresenceSync(currentRoomChannel.presenceState()));
            currentRoomChannel.subscribe(async (status) => {
                if (status === 'SUBSCRIBED') await currentRoomChannel.track({ email: currentUser.email, joined_at: new Date().toISOString() });
            });
        }

        async function leaveRoomRealtime() {
            if (currentRoomChannel) {
                try { await currentRoomChannel.untrack(); await sb.removeChannel(currentRoomChannel); }
                catch (error) { console.error('Erro ao sair do canal:', error); }
                currentRoomChannel = null; participantsList.innerHTML = '';
            }
        }

        createRoomBtn.addEventListener('click', async () => {
            toggleLoading(true); showLobbyMessage('', false);
            if (!currentUser) { showLobbyMessage('Erro: Usuário não está logado.', true); toggleLoading(false); return; }
            const newCode = generateRoomCode();
            const { data, error } = await sb.from('rooms').insert({ room_code: newCode, creator_id: currentUser.id }).select().single();
            if (error) {
                if (error.code === '23505') showLobbyMessage('Erro ao criar sala, tente novamente.', true);
                else showLobbyMessage(error.message, true);
            } else if (data) {
                roomCodeDisplay.textContent = data.room_code;
                showView('room-view');
                joinRoomRealtime(data.room_code);
                saveUserCurrentRoom(data.room_code);
            }
            toggleLoading(false);
        });

        joinRoomForm.addEventListener('submit', async (e) => {
            e.preventDefault(); toggleLoading(true); showLobbyMessage('', false);
            const code = roomCodeInput.value.toUpperCase().trim();
            if (!code) { showLobbyMessage('Por favor, insira um código.', true); toggleLoading(false); return; }
            const { data, error } = await sb.from('rooms').select('room_code').eq('room_code', code).maybeSingle();
            if (error) showLobbyMessage(error.message, true);
            else if (data) {
                roomCodeDisplay.textContent = data.room_code;
                showView('room-view');
                joinRoomForm.reset();
                joinRoomRealtime(data.room_code);
                saveUserCurrentRoom(data.room_code);
            } else showLobbyMessage('Sala não encontrada. Verifique o código.', true);
            toggleLoading(false);
        });

        leaveRoomBtn.addEventListener('click', async () => {
            await leaveRoomRealtime();
            clearUserCurrentRoom();
            showView('lobby-view');
            showLobbyMessage('', false);
        });

        // --- 7. INICIALIZAÇÃO E AUTENTICAÇÃO ---
        async function handleUserLoggedIn(session) {
            currentUser = session.user;
            welcomeMessage.textContent = `Bem-vindo, ${currentUser.email}`;
            const { data: profile, error } = await sb.from('profiles').select('last_room').eq('id', currentUser.id).single();
            if (error) {
                console.error('Erro ao buscar perfil:', error.message);
                showView('lobby-view'); // Falha para o lobby por segurança
                return;
            }
            if (profile && profile.last_room) {
                const { data: roomData } = await sb.from('rooms').select('room_code').eq('room_code', profile.last_room).maybeSingle();
                if (roomData) {
                    roomCodeDisplay.textContent = roomData.room_code;
                    showView('room-view');
                    joinRoomRealtime(roomData.room_code);
                } else {
                    await clearUserCurrentRoom();
                    showView('lobby-view');
                }
            } else {
                showView('lobby-view');
            }
        }

        // Único listener para o estado de autenticação. Ele lida com o login inicial (INITIAL_SESSION) e todas as mudanças.
        sb.auth.onAuthStateChange(async (event, session) => {
            toggleLoading(true);
            try {
                // Se existe uma sessão, o usuário está logado.
                if (session) {
                    await handleUserLoggedIn(session);
                }
                // Se não há sessão, o usuário está deslogado.
                else {
                    await leaveRoomRealtime();
                    currentUser = null;
                    showView('auth-view');
                }
            } catch (error) {
                console.error("Erro durante a mudança de estado de autenticação:", error);
                // Garante que o usuário veja a tela de login se algo der errado
                showView('auth-view');
            } finally {
                // Garante que o loading seja sempre desativado, mesmo com erros
                toggleLoading(false);
            }
        });

        window.addEventListener('beforeunload', () => { if (currentRoomChannel) leaveRoomRealtime(); });

    </script>
</body>
</html>
